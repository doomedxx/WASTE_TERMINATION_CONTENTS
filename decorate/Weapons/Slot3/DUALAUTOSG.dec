//ASSAULT RIFLES (c) 2014 SGT MARK IV tm... And a bit of Pa1nki113r (R)
ACTOR DualAutoShotguns: DoomWeapon
{
	Weapon.BobRangeX 0.3
	Weapon.BobRangeY 0.5
	Weapon.BobStyle InverseSmooth
	Weapon.BobSpeed 2.4
	Weapon.AmmoUse1 0 
	//Weapon.SelectionOrder 100
	Weapon.AmmoGive1 0 //How much ammo can be gathered with this weapon
	Weapon.AmmoUse2 0
	Weapon.AmmoGive2 0
	Weapon.AmmoType1 "NewShell" //Reserve ammo type
	Weapon.AmmoType2 "DoubleASGAmmo" //Magazine ammo type
	Obituary "%o was drilled by %k's Double Rifles." //Kill message
	+FLOORCLIP
	+DONTGIB
    AttackSound "None" //You better leave this clear
	Tag "Dual Autoshotguns"
	Inventory.Pickupmessage "" //Pickup message
    +WEAPON.NOAUTOAIM //Makes this weapon never autoaim, so recoil can work better
    Scale 0.6 //Weapon's pickup sprite size
	+WEAPON.NOAUTOFIRE
	+WEAPON.NO_AUTO_SWITCH
	+POWERED_UP
	Weapon.SisterWeapon AutoShotgun
	
	States
	{
	
	Spawn:
	TNT1 A 100//Pickup sprite
	Loop
	
	LedgeClimb:
		TNT1 A 0 A_TakeInventory("Zoomed",1)
        TNT1 A 0 A_ZoomFactor(1.0)
		TNT1 A 0 A_TakeInventory("ADSmode",1)
		TNT1 A 0 A_Playsound("ledgeclimb")
		TNT1 A 0 A_FireCustomMissile("ShakeYourAssMinor", 0, 0, 0, 0)
		TNT1 A 0 A_SetPitch(-5)
		TNT1 A 0 A_GunFlash("DontFlashClimbing")
		CL1M FDCCDFHIK 1 A_SetPitch(-4)
		TNT1 A 0 A_TakeInventory("Climbed_Ledge", 5000)
		TNT1 A 0 A_TakeInventory("Grabbing_A_Ledge", 5000)
		Goto Ready+6
		
	DontFlashClimbing:
	    TNT1 A 9
		Goto Flash
	
	
	Ready:
		//TNT1 A 0 A_PlaySound("weapons/sgpump")
		P8SS ABCDE 1
		TNT1 A 0 A_GunFlash
		Goto ReadyToFire
		
		
	Fire:
	P8W2 A 1 
			{
				A_WeaponReady(WRF_NOFIRE);
				A_WeaponOffset(CallACS("Script_GetGunOffsetX"), CallACS("Script_GetGunOffsetY"),WOF_KEEPY);
			}
	Goto ReadyToFire
	
	ReadyToFire:
		P8W2 A 1 A_WeaponReady(WRF_NOFIRE)// Weapon is ready to fire
		//TNT1 A 0 A_JumpIfInventory("IsFiringSecondary", 1, 1)
		//TNT1 A 0 A_GunFlash
		TNT1 A 0 A_JumpIfInventory("FiredPrimary",1,"FireLeftGun") //Check if player wants to reload
		TNT1 A 0 A_JumpIfInventory("Reloading",1,"Reload") //Check if player wants to reload
		TNT1 A 0 A_JumpIfInventory("Grabbing_A_Ledge",1,"LedgeClimb")
		TNT1 A 0 A_JumpIfInventory("Kicking",1,"DoKick")
        TNT1 A 0 A_JumpIfInventory("Taunting",1,"Taunt")
		TNT1 A 0 A_JumpIfInventory("Salute1", 1, "Salute")
		TNT1 A 0 A_JumpIfInventory("Salute2", 1, "Salute")
		TNT1 A 0 A_JumpIfInventory("DoGrenade", 1, "ThrowGrenade")//DoMine
		TNT1 A 0 A_JumpIfInventory("DoMine", 1, "ThrowMine")
		TNT1 A 0 A_JumpIfInventory("DoElecPod", 1, "ThrowElecPod")
		TNT1 A 0 A_JumpIfInventory("DoSwarmPod", 1, "ThrowSwarmPod")
		TNT1 A 0 A_JumpIfInventory("DoHealBackpack", 1, "UseHealthBackPack")
		TNT1 A 0 A_JumpIfInventory("GoWeaponSpecialAbility", 1, "NoDualWield")
		TNT1 A 0 A_JumpIfInventory("GrabbedBarrel", 1, "GrabBarrel")
		Loop
		
	NoDualWield:
		TNT1 A 0 A_Takeinventory("GoWeaponSpecialAbility",1)
		TNT1 A 0 A_SelectWeapon("AutoShotgun")
		Goto Select
		
	Deselect:
		TNT1 A 0 A_PlaySound("IronSights", 0)
		TNT1 A 0 A_Takeinventory("RandomHeadExploder",1)
		TNT1 A 0 A_TakeInventory("DoPunch",1)
		TNT1 A 0 A_JumpIfInventory("GotMeatShield", 1, "GrabEnemy")
		TNT1 AAAAAA 0 A_Lower
		TNT1 A 1 A_Lower //Makes player switch weapons faster
		Wait
	GrabEnemy:	
	    TNT1 A 0
	    TNT1 A 0 A_PlaySound("weapons/fistwhoosh")
        PKUP ABCDEF 1
		TNT1 AAAAAAAAAAAAAAAAAAA 0 A_Lower
		Wait
	GrabBarrel:
		TNT1 A 0
		TNT1 A 0 A_Takeinventory("HasUnloaded",1)
		TNT1 A 0 A_Takeinventory("Unloading",1)
		TNT1 A 0 A_Takeinventory("Zoomed",1)
        TNT1 A 0 A_ZoomFactor(1.0)
	    TNT1 A 0 A_PlaySound("weapons/fistwhoosh")
		TNT1 A 0 A_TakeInventory("GrabbedBarrel", 1)
		TNT1 A 0 A_TakeInventory("GrabbedBurningBarrel", 1)
        PKUP ABCDEF 1
		TNT1 A 0 A_SelectWeapon("BarrelThrower")
		TNT1 AAAAAAAAAAAAAAAAAAA 0 A_Lower
		Wait
	Select:
		TNT1 A 0 A_PlaySound("IronSights", 0)
		TNT1 A 0 A_Giveinventory("RandomHeadExploder",1)
		TNT1 A 0 A_TakeInventory("GoWeaponSpecialAbility", 1)
		TNT1 AAAAAAAAA 0 A_Raise
		TNT1 AAAA 1 A_Raise
		Wait
	
	DryFire:
	    P8W2 D 1 A_PlaySound("DRYFIRE", 1)
		P8W2 A 3
		Goto ReadyToFire
	 
	FireLeftGun:
		TNT1 A 0 A_WeaponOffset(0,32)
		TNT1 A 0 A_JumpIfInventory("DoubleASGAmmo", 1, 1)//First of all, checks if there is ammo inside the gun
		Goto Reload//Couldn't find any ammo. Reload
		TNT1 A 0 A_TakeInventory("StopDualWield", 10)
		TNT1 A 0 A_JumpIfInventory("LeftASGAmmo", 1, 1)//Checks if there is ammo inside the left Rifle
		Goto DryFire//Couldn't find any ammo. Don't fire.
		TNT1 A 0 A_TakeInventory("LeftASGAmmo", 1)//Remove the fake ammo
		TNT1 A 0 A_TakeInventory("DoubleASGAmmo", 1)//Removes 1 ammo from magazine
		TNT1 A 0 A_AlertMonsters
		
	    P8W2 B 1 BRIGHT A_FireBullets (frandom(5.85,6.65), frandom(5.32,6.75), 4, 6, "MachineGunBulletPuff")
		P8W2 A 0 A_FireBullets (frandom(6.84,7.45), frandom(5.3,6.80), 4, 6, "ShotgunPuff")
		TNT1 AAAAAAAA 0 BRIGHT A_FireCustomMissile("ShotgunParticles", random(-17,17), 0, -1, random(-17,17))
		TNT1 AA 0 A_FireCustomMissile("SmokeSpawner",0,0, 6,4)
		TNT1 A 0 A_FireCustomMissile("ShakeYourAssDouble", 0, 0, 0, 0)
		TNT1 A 0 A_PlaySound("Weapons/AutoShotgun", 4)//Play gun fire sound
		RIFF A 0 A_FireCustomMissile("GunFireSmoke", 0, 0, -5, 0, 0, 0)
		TNT1 AAA 0 ACS_NamedExecute("Recoil282", 0, 0, 0, 0)
		P8W2 C 1 A_FireCustomMissile("ShotCaseSpawn",0,0,6,4) //Ejetts empty brass
		P8W2 D 0 A_SetPitch(-1.35 + pitch)//Vertical recoil down
		P8W2 D 1 //A_Refire
		P8W2 A 3 A_WeaponReady(1)
		P8W2 A 1 //A_Refire
		
		
		TNT1 A 0 A_JumpIfInventory("DoubleASGAmmo", 1, 1)//Checks if there is ammo inside the gun
		Goto Reload//Couldn't find any ammo. Reload.
		TNT1 A 0 A_GunFlash
		Goto ReadyToFire//No need to reload. Get back to Ready state.
		
	Flash:	
	    TNT1 A 0
		TNT1 A 0 A_JumpIfInventory("StopDualWield", 1, "LightDone")
		P8W1 A 1
		TNT1 A 0 A_JumpIfInventory("FiredSecondary", 1, "FireRightGun")
		//P3W1 A 1
		Loop
	
	DontFlash:
	    TNT1 A 1
		Goto Flash
	
	FireRightGun:
		TNT1 A 0 A_WeaponOffset(0,32)
		TNT1 A 0 A_JumpIfInventory("StopDualWield", 1, "LightDone")
		TNT1 A 0 A_GiveInventory("IsFiringSecondary", 1)
		TNT1 A 0 A_JumpIfInventory("DoubleASGAmmo", 1, 2)//First of all, checks if there is ammo inside the gun
		TNT1 A 0 A_GiveInventory("IsReloading", 1)//Couldn't find any ammo. Reload
		Goto Flash//Couldn't find any ammo. Reload
		
		TNT1 A 0 A_JumpIfInventory("AutoShotgunAmmo", 1, 1)//Checks if there is ammo inside the left Rifle
		Goto DryFire2//Couldn't find any ammo. Don't fire.
		TNT1 A 0 A_TakeInventory("StopDualWield", 10)
		TNT1 A 0 A_TakeInventory("DoubleASGAmmo", 1)//Removes 1 ammo from magazine
		TNT1 A 0 A_TakeInventory("AutoShotgunAmmo", 1)//Remove the fake ammo
		TNT1 A 0 A_AlertMonsters
		
	    P8W1 B 1 BRIGHT A_FireBullets (frandom(5.85,6.65), frandom(5.32,6.75), 4, 6, "MachineGunBulletPuff")
		P8W1 A 0 A_FireBullets (frandom(6.84,7.45), frandom(5.3,6.80), 4, 6, "ShotgunPuff")
		TNT1 AAAAAAAA 0 BRIGHT A_FireCustomMissile("ShotgunParticles", random(-17,17), 0, -1, random(-17,17))
		TNT1 AA 0 A_FireCustomMissile("SmokeSpawner",0,0, -6,4)
		TNT1 A 0 A_FireCustomMissile("ShakeYourAssDouble", 0, 0, 0, 0)
		TNT1 A 0 A_PlaySound("Weapons/AutoShotgun", 5)//Play gun fire sound
		RIFF A 0 A_FireCustomMissile("GunFireSmoke", 0, 0, 5, 0, 0, 0)
		TNT1 AAA 0 ACS_NamedExecute("Recoil282", 0, 0, 0, 0)
		P8W1 C 1 A_FireCustomMissile("ShotCaseSpawn",0,0,-6,4) //Ejetts empty brass
		P8W1 D 0 A_SetPitch(-1.35 + pitch)//Vertical recoil down
		P8W1 D 1 //A_Refire
		P8W1 A 2 A_WeaponReady(1)
		P8W1 A 1 //A_Refire
		
		
		P3W1 A 0
		TNT1 A 0 A_JumpIfInventory("DoubleASGAmmo", 1, 1)//Checks if there is ammo inside the gun
		TNT1 A 0 A_GiveInventory("IsReloading", 1)//Couldn't find any ammo. Reload
		Goto Flash
		
	DryFIre2:
	    P8W1 D 1 A_PlaySound("weapons/empty", 1)
		P8W1 AAA 1 A_JumpIfInventory("StopDualWield", 1, "LightDone")
		Goto Flash
		
	Reload:
		TNT1 A 0 A_JumpIfInventory("AutoshotgunDrumMag", 1, "DrumReload")
	    P8SG A 0 //Always leave one free line before the reload animation to prevent bugs
		TNT1 A 0 A_TakeInventory("Reloading")//Always put this to make sure that the game understand that you already are reloading your weapon, and calling this state again is not necessary
		TNT1 A 0 A_JumpIfInventory("DoubleASGAmmo", 24, "ReadytoFire")//Checks if the weapon is not fully reloaded, if yes, cancel reload.
		TNT1 A 0 A_JumpIfInventory("NewShell", 1, 2)//Checks if you have spare ammo
		Goto ReadyToFire
		TNT1 AAAA 0
		Goto RightReload
		
		
	RightReload:
		TNT1 A 0 A_GiveInventory("StopDualWield", 1)
		TNT1 A 0 A_JumpIfInventory("AutoShotgunAmmo", 12, "LeftReload")
		P8SS EDCBA 1
		TNT1 A 0 A_TakeInventory("Zoomed", 1)
        TNT1 A 0 A_ZoomFactor(1.0)
		AUSG A 0 //A_WeaponReady
        TNT1 A 0 A_JumpIfInventory("NewShell", 1, 3)
        Goto FinalReload
		TNT1 AAAA 0
		AUSR A 1
		TNT1 A 0 A_GiveInventory("IsCocking", 1)
		AUSR BCDEFG 1
		TNT1 AAA 0
        TNT1 A 0 A_JumpIfInventory("NewShell", 1, 2)
		Goto FinalReload
		TNT1 A 0
        TNT1 A 0 A_JumpIfInventory("AutoShotgunAmmo", 12, 23)
        TNT1 A 0 
        TNT1 A 0 A_GiveInventory("DoubleASGAmmo", 1)
		TNT1 A 0 A_GiveInventory("AutoShotgunAmmo", 1)
		TNT1 A 0 A_TakeInventory("NewShell", 1)
		TNT1 A 0 A_TakeInventory("StopDualWield", 1)
        AUSR HIJKL 1
        AUSR M 1 A_PlaySound("insertshell")
        AUSR NH 1 A_ReFire("FinalReload")
        AUSR H 0 A_ReFire("FinalReload")
        TNT1 A 0 A_JumpIfInventory("Kicking", 1, "DoKick")
        Goto RightReload+25
        TNT1 AAAAA 0
		AUSR GGGGGGGGGGGGGG 0
		AUSR QRST 1 
		AUSR U 1 A_PlaySound("weapons/sgmvpump", 1)
		AUSR VWXYXWV 1
        AUSR V 1 A_PlaySound("weapons/sgpump", 1)
		AUSR UTCBA 1 A_JumpIfInventory("Kicking", 1, "DoKick")
		AUSG A 0 
		TNT1 AAAAAAAAAAAAAAAAAAAAAAA 0
		TNT1 A 1 A_TakeInventory("StopDualWield", 1)
		//Goto Ready+23
		
	LeftReload:
		TNT1 A 0 A_JumpIfInventory("LeftASGAmmo", 12, "FinalReload")
		TNT1 A 0 A_GiveInventory("AutoShotgunAmmo", 12)
		TNT1 A 0 A_GiveInventory("StopDualWield", 1)
		TNT1 A 0 A_TakeInventory("Zoomed", 1)
        TNT1 A 0 A_ZoomFactor(1.0)
		A2SR A 0 //A_WeaponReady
        TNT1 A 0 A_JumpIfInventory("NewShell", 1, 3)
        Goto FinalReload
        TNT1 AAAA 0
		A2SR A 1
		A2SR BCDEFG 1
		TNT1 AAA 0
		TNT1 A 0 A_JumpIfInventory("NewShell", 1, 2)
		Goto FinalReload
        TNT1 AAAA 0
        TNT1 A 0 A_JumpIfInventory("LeftASGAmmo", 12, 22)
        TNT1 A 0
        TNT1 A 0 A_GiveInventory("DoubleASGAmmo", 1)
		TNT1 A 0 A_GiveInventory("LeftASGAmmo", 1)
		TNT1 A 0 A_TakeInventory("NewShell", 1)
		TNT1 A 0 A_TakeInventory("StopDualWield", 1)
        A2SR HIJKL 1
        A2SR M 1 A_PlaySound("insertshell")
        A2SR NH 1 A_ReFire("FinalReload")
        A2SR H 0 A_ReFire("FinalReload")
        TNT1 A 0 A_JumpIfInventory("Kicking", 1, "DoKick")
        Goto LeftReload+18
        TNT1 AAAAA 0
		A2SR GGGGGGGGGGGGGG 0
		A2SR QRST 1 
		A2SR U 1 A_PlaySound("weapons/sgmvpump", 1)
		A2SR VWXYXWV 1
        A2SR V 1 A_PlaySound("weapons/sgpump", 1)
		A2SR UTCBA 1 A_JumpIfInventory("Kicking", 1, "DoKick")
		TNT1 AAAAAAAAAAAAAAAAAAAAAAA 0
		//Goto FinalReload
		
     FinalReload:
		TNT1 A 0 A_TakeInventory("Reloading", 50)
		TNT1 A 0 A_TakeInventory("StopDualWield", 50)
		TNT1 A 0 A_TakeInventory("FiredPrimary", 1)
		TNT1 A 0 A_TakeInventory("FiredSecondary", 1)
		P8SS ABCDE 1 A_WeaponReady
		TNT1 A 0 A_GunFlash
		Goto ReadyToFire
		
		
	DrumReload:
	    P2SG A 0 //Always leave one free line before the reload animation to prevent bugs
		TNT1 A 0 A_TakeInventory("Reloading")//Always put this to make sure that the game understand that you already are reloading your weapon, and calling this state again is not necessary
		TNT1 A 0 A_JumpIfInventory("DoubleASGAmmo", 40, "ReadytoFire")//Checks if the weapon is not fully reloaded, if yes, cancel reload.
		TNT1 A 0 A_JumpIfInventory("NewShell", 1, 1)//Checks if you have spare ammo
		Goto ReadyToFire//The game identified that you have no spare ammo. Get back to Ready animation
		TNT1 A 0 A_GiveInventory("StopDualWield", 1)
        
	DrumRefill:	
	    TNT1 A 0
		TNT1 A 0 A_JumpIfInventory("NewShell", 1, 1)//Check if you have spare ammo again. This line is necessary in case you don't have enough ammo to fill an entire clip.
		Goto DrumFinishReload//Gun is fully loaded. Go to finish animation
	    TNT1 A 0 A_TakeInventorY("NewShell", 1)//Removes one spare bullet
		TNT1 A 0 A_GiveInventory("DoubleASGAmmo", 1)//Puts one bullet inside the clip
		TNT1 A 0 A_JumpIfInventory("DoubleASGAmmo", 40, "DrumFinishReload")//Checks if weapons is full
		Loop
		
		
	DrumFinishReload:	//Weapon is fully loaded. Time to play the reloading animation.
	    TNT1 A 0
		TNT1 A 0 A_JumpIfInventory("LeftASGAmmo", 20, "DrumFinishReloadRightOnly")
		TNT1 A 0 A_JumpIfInventory("AutoShotgunAmmo", 20, "DrumFinishReloadLeftOnly")
		TNT1 A 0 A_GiveInventory("LeftASGAmmo", 20)
		TNT1 A 0 A_GiveInventory("AutoShotgunAmmo", 20)
		
		
		P8SS EDCBA 1
		
		TNT1 A 5
		
		TNT1 A 0 A_PlaySound("ASGOUT", 2)
		TNT1 A 0 A_FireCustomMissile("EmptyASGDrum",-5,0,8,-4)
		AUSR ABCDEFG 1 //A_WeaponReady
		AUSR HHHHHHHH 1 
		TNT1 A 0 A_PlaySound("Ironsights", 3)
		A9SR HHIIJKLMNO 1
		A9SR PPPQQ 1
		TNT1 A 0 A_PlaySound("ASGIN", 4)
		A9SR QQ 1
		AUSR HH 1
		
		
		TNT1 A 10
		TNT1 A 0 A_PlaySound("ASGOUT", 2)
		TNT1 A 0 A_FireCustomMissile("EmptyASGDrum",-5,0,8,-4)
		A2SR ABCDEF 1 //A_WeaponReady
		A2SR FFFFFFFF 1 
		TNT1 A 0 A_PlaySound("Ironsights", 3)
		A8SR HHIIJKLMNO 1
		A8SR PPPQQ 1
		TNT1 A 0 A_PlaySound("ASGIN", 4)
		A8SR QQ 1
		A2SR FF 1
		
		TNT1 A 0 A_TakeInventory("StopDualWield", 1)
		TNT1 A 0 A_TakeInventory("FiredPrimary", 1)
		TNT1 A 0 A_TakeInventory("FiredSecondary", 1)
		TNT1 A 5
		P8SS ABCDE 1
		TNT1 A 0 A_GunFlash
		TNT1 A 0 A_TakeInventory("Reloading")
		Goto ReadyToFire	
		
		
	
	DrumFinishReloadLeftOnly:	//Weapon is fully loaded. Time to play the reloading animation.
		TNT1 A 0 A_GiveInventory("LeftASGAmmo", 40)
		TNT1 A 0 A_GiveInventory("AutoShotgunAmmo", 40)
		P8SS EDCBA 1
		TNT1 A 5
		
		TNT1 A 0 A_PlaySound("ASGOUT", 2)
		TNT1 A 0 A_FireCustomMissile("EmptyASGDrum",-5,0,8,-4)
		A2SR ABCDEF 1 //A_WeaponReady
		A2SR FFFFFFFF 1 
		TNT1 A 0 A_PlaySound("Ironsights", 3)
		A8SR HHIIJKLMNO 1
		A8SR PPPQQ 1
		TNT1 A 0 A_PlaySound("ASGIN", 4)
		A8SR QQ 1
		A2SR FF 1
		
		TNT1 A 0 A_TakeInventory("StopDualWield", 1)
		TNT1 A 0 A_TakeInventory("FiredPrimary", 1)
		TNT1 A 0 A_TakeInventory("FiredSecondary", 1)
		TNT1 A 5
		P8SS ABCDE 1
		TNT1 A 0 A_GunFlash
		TNT1 A 0 A_TakeInventory("Reloading")
		Goto ReadyToFire	
		
	DrumFinishReloadRightOnly:	//Weapon is fully loaded. Time to play the reloading animation.
		TNT1 A 0 A_GiveInventory("LeftASGAmmo", 40)
		TNT1 A 0 A_GiveInventory("AutoShotgunAmmo", 40)
		P8SS EDCBA 1
		TNT1 A 5
		
		TNT1 A 0 A_PlaySound("ASGOUT", 2)
		TNT1 A 0 A_FireCustomMissile("EmptyASGDrum",-5,0,8,-4)
		AUSR ABCDEFG 1 //A_WeaponReady
		AUSR HHHHHHHH 1 
		TNT1 A 0 A_PlaySound("Ironsights", 3)
		A9SR HHIIJKLMNO 1
		A9SR PPPQQ 1
		TNT1 A 0 A_PlaySound("ASGIN", 4)
		A9SR QQ 1
		AUSR HH 1
		
		TNT1 A 0 A_TakeInventory("StopDualWield", 1)
		TNT1 A 0 A_TakeInventory("FiredPrimary", 1)
		TNT1 A 0 A_TakeInventory("FiredSecondary", 1)
		TNT1 A 5
		P8SS ABCDE 1
		TNT1 A 0 A_GunFlash
		TNT1 A 0 A_TakeInventory("Reloading")
		Goto ReadyToFire	
		
		
	UseHealthBackPack:
		TNT1 A 0 A_GiveInventory("StopDualWield", 1)
		TNT1 A 0 A_ZoomFactor(1.0)
		TNT1 A 0 A_TakeInventory("ADSMode", 1)
		TNT1 A 0 A_TakeInventory("DoHealBackpack", 1)
		SYRI ABCDEFGHIJ 1
		SYRI A 0 A_PlaySound("blodr1", 3)
		SYRI KLL 1
		SYRI A 0 A_PlaySound("misc/N_HP_pickup", 2)
		SYRI MMMM 1
		SYRI LKJIHGFEDCBA 1
		TNT1 A 0 A_TakeInventory("StopDualWield", 1)
		Goto Ready
		
		
	 ThrowMine:
	 ThrowGrenade:
	 ThrowElecPod:
	 ThrowSwarmPod:
		TNT1 A 0 A_ZoomFactor(1.0)
		TNT1 A 0 A_TakeInventory("ADSMode", 1)
		TNT1 A 0 A_TakeInventory("DoGrenade", 1)
		TNT1 A 0 A_TakeInventory("DoSwarmPod", 1)
		TNT1 A 0 A_TakeInventory("DoElecPod", 1)
		TNT1 A 0 A_TakeInventory("DoMine", 1)
		TNT1 A 0
		TNT1 A 0 A_Print("You can't throw right now!")
		Goto ReadyToFire
		
		
	FlashKicking:
		P8SS E 1 
		P8SS E 1 
		P8SS D 1 
		P8SS C 3 
		P8SS B 3
		P8SS C 3 
		P8SS D 1 
		P8SS E 1 
		P8SS E 1 
		P8SG AAA 1 
		Goto Flash
		
	FlashAirKicking:
		P8SS E 1 
		P8SS E 1 
		P8SS D 1 
		P8SS C 3 
		P8SS B 3
		P8SS C 3 
		P8SS D 1 
		P8SS E 1 
		P8SS F 1 
		P8SG AAAA 1 
		Goto Flash
		
	FlashSlideKicking:
		P8SS ED 2 
		P8SS CCBBBAAABBB 2  
		Goto Flash
		
	FlashSlideKickingStop:
		//TNT1 A 0
		P8SS BCDEE 1 
		P8SG AA 1 
		Goto Flash

    DoKick:
	    TNT1 A 0
		TNT1 A 0 A_TakeInventory("Zoomed",1)
        TNT1 A 0 A_ZoomFactor(1.0)
		TNT1 A 0 A_TakeInventory("ADSmode",1)
		NULL A 0 A_JumpIf (momZ > 0, "AirKick")
		NULL A 0 A_JumpIf (momZ < 0, "AirKick")
		NULL A 0 A_JumpIf(Height < 54, "SlideKick")
        TNT1 A 0 A_JumpIfInventory("PowerStrength",1,"BerserkerKick")
		TNT1 A 0 A_PlaySound("KICK", 1)
		TNT1 A 0 SetPlayerProperty(0,1,0)
		TNT1 A 0 A_GunFlash("FlashKicking")
		TNT1 A 0 A_SetAngle(-0.5 + angle)
		TNT1 A 1 A_SetPitch(+0.5 + pitch)
		TNT1 A 0 A_SetAngle(-0.5 + angle)
		TNT1 A 1 A_SetPitch(+0.5 + pitch)
		TNT1 A 0 A_ZoomFactor(0.985)
		KICK B 1 A_SetPitch(+0.5 + pitch)
		TNT1 A 0 A_SetAngle(-0.5 + angle)
		TNT1 A 0 A_ZoomFactor(0.970)
		KICK C 1 A_SetAngle(-0.5 + angle)
		TNT1 A 0 A_ZoomFactor(0.965)
		TNT1 A 0 A_SetAngle(+0.5 + angle)
		KICK D 1 A_SetPitch(+1.25 + pitch)
		TNT1 A 0 A_ZoomFactor(0.950)
		RIfF A 0 A_FireCustomMissile("KickAttack", 0, 0, 0, -7)
		
        KICK H 3 
		TNT1 A 0 A_ZoomFactor(0.965)
		TNT1 A 0 A_SetAngle(+1 + angle)
		TNT1 A 0 A_Recoil(-1)
		KICK A 0 A_TakeInventory("Kicking",1)
		KICK I 1
		TNT1 A 0 A_ZoomFactor(0.970)
		TNT1 A 0 A_SetAngle(+1 + angle)
		KICK G 1 A_SetPitch(-0.5 + pitch)
		TNT1 A 0 A_ZoomFactor(0.985)
		KICK F 1 A_SetPitch(-0.5 + pitch)
		TNT1 A 0 A_ZoomFactor(0.998)
		TNT1 A 0 A_SetAngle(+0.5 + angle)
		KICK E 1 A_SetPitch(-0.5 + pitch)
		TNT1 A 0 A_ZoomFactor(0.999)
		TNT1 A 0 A_SetAngle(+0.5 + angle)
		KICK D 1 A_SetAngle(+0.5 + angle)
		TNT1 A 0 A_ZoomFactor(1.0)
		TNT1 A 0 A_SetPitch(-0.5 + pitch)
		KICK C 1 A_SetAngle(-0.5 + angle)
		KICK B 1 A_SetPitch(-1.25 + pitch)
		KICK A 1
		TNT1 A 0 SetPlayerProperty(0,0,0)
		TNT1 A 0 A_JumpIfInventory("GoFatality", 1, "Steady")
		Goto ReadyToFire
		
SlideKick:
		TNT1 A 0 A_GiveInventory("IsSlideKicking", 1)
		TNT1 A 0 A_JumpIfInventory("GoFatality", 1, "Steady")
		TNT1 A 0 A_Jumpifinventory("PowerStrength",1,"SuperSlideKick")
		TNT1 A 0 ACS_Execute(5922, 0, 0, 0, 0)
		TNT1 A 0 A_PlaySound("SlideKick/Start", 1)
		TNT1 A 0 A_Recoil (-13)
		TNT1 A 0 A_GunFlash("FlashSlideKicking")
		//NULL A 0 A_JumpIf(Height > 54, "LowerKick")
		TNT1 A 0 A_ZoomFactor(0.95)
		SLDK A 1 A_ZoomFactor(0.90)
		SLDK B 1 A_ZoomFactor(0.85)
		SLDK C 1 A_ZoomFactor(0.80)
		SLDK D 1 A_ZoomFactor(0.75)
        RIFF AA 0 A_FireCustomMissile("KickAttack", 0, 0, 0, -31)
		NULL A 0 A_JumpIf(Height > 54, "LowerKick")
		TNT1 A 0 A_JumpIfInventory("KickHasHitAnObject", 1, "LowerKick")
		SLDK F 3
		TNT1 A 0 A_FireCustomMissile("KickAttack", 0, 0, 0, -31)
		NULL A 0 A_JumpIf(Height > 54, "LowerKick")
		TNT1 A 0 A_JumpIfInventory("KickHasHitAnObject", 1, "LowerKick")
		TNT1 A 0 A_Recoil (-5)
		SLDK E 3
		TNT1 A 0 A_FireCustomMissile("KickAttack", 0, 0, 0, -31)
		NULL A 0 A_JumpIf(Height > 54, "LowerKick")
		TNT1 A 0 A_JumpIfInventory("KickHasHitAnObject", 1, "LowerKick")
		TNT1 A 0 A_Recoil (-5)
		SLDK F 3
		TNT1 A 0 A_ZoomFactor(0.960)
		TNT1 A 0 A_FireCustomMissile("KickAttack", 0, 0, 0, -31)
		NULL A 0 A_JumpIf(Height > 54, "LowerKick")
		TNT1 A 0 A_JumpIfInventory("KickHasHitAnObject", 1, "LowerKick")
		TNT1 A 0 A_Recoil (-4)
		SLDK G 3
		TNT1 A 0 A_FireCustomMissile("KickAttack", 0, 0, 0, -31)
		NULL A 0 A_JumpIf(Height > 54, "LowerKick")
		TNT1 A 0 A_JumpIfInventory("KickHasHitAnObject", 1, "LowerKick")
		TNT1 A 0 A_Recoil (-4)
		SLDK F 3
		TNT1 A 0 A_FireCustomMissile("KickAttack", 0, 0, 0, -31)
		NULL A 0 A_JumpIf(Height > 54, "LowerKick")
		TNT1 A 0 A_JumpIfInventory("KickHasHitAnObject", 1, "LowerKick")
		TNT1 A 0 A_Recoil (-3)
		SLDK F 3
		TNT1 A 0 A_FireCustomMissile("KickAttack", 0, 0, 0, -31)
		NULL A 0 A_JumpIf(Height > 54, "LowerKick")
		TNT1 A 0 A_JumpIfInventory("KickHasHitAnObject", 1, "LowerKick")
		TNT1 A 0 A_Recoil (-2)
		KICK A 0 A_Takeinventory("Kicking",1)
		KICK A 0 A_Takeinventory("IsSlideKicking",1)
		TNT1 A 0 A_ZoomFactor(1.0)
		SLDK HK 2
		TNT1 A 0 ACS_Execute(5923, 0, 0, 0, 0)
		TNT1 A 0 A_JumpIfInventory("GoFatality", 1, "Steady")
		Goto Readytofire
		
	 LowerKick:
		TNT1 A 0 A_ZoomFactor(1.0)
		KICK A 0 A_Takeinventory("Kicking",1)
		KICK A 0 A_Takeinventory("KickHasHitAnObject",1)
		TNT1 A 0 A_TakeInventory("IsSlideKicking", 1)
		TNT1 A 0 A_JumpIfInventory("GoFatality", 1, "Steady")
		TNT1 A 0 A_PlaySound("SlideKick/End", 1)
		TNT1 A 0 A_GunFlash("FlashSlideKickingStop")
		SLDK HK 2
		TNT1 A 0 ACS_Execute(5923, 0, 0, 0, 0)
		TNT1 A 0 A_JumpIfInventory("GoFatality", 1, "Steady")
		Goto Readytofire
		
	SuperSlideKick:
		TNT1 A 0 A_JumpIfInventory("GoFatality", 1, "Steady")
		TNT1 A 0 ACS_Execute(5922, 0, 0, 0, 0)
		TNT1 A 0 A_PlaySound("SlideKick/Start", 1)
		TNT1 A 0 A_Recoil (-15)
		TNT1 A 0 A_GunFlash("FlashSlideKicking")
		NULL A 0 A_JumpIf(Height > 54, "LowerKick")
		TNT1 A 0 A_ZoomFactor(0.95)
		SLDK A 1 A_ZoomFactor(0.90)
		SLDK B 1 A_ZoomFactor(0.85)
		SLDK C 1 A_ZoomFactor(0.80)
		SLDK D 1 A_ZoomFactor(0.75)
        RIFF AA 0 A_FireCustomMissile("SuperKickAttack", 0, 0, 0, -31)
		NULL A 0 A_JumpIf(Height > 54, "LowerKick")
		TNT1 A 0 A_JumpIfInventory("KickHasHitAnObject", 1, "LowerKick")
		SLDK F 3
		TNT1 A 0 A_FireCustomMissile("SuperKickAttack", 0, 0, 0, -31)
		NULL A 0 A_JumpIf(Height > 54, "LowerKick")
		TNT1 A 0 A_JumpIfInventory("KickHasHitAnObject", 1, "LowerKick")
		TNT1 A 0 A_Recoil (-5)
		SLDK E 3
		TNT1 A 0 A_FireCustomMissile("SuperKickAttack", 0, 0, 0, -31)
		NULL A 0 A_JumpIf(Height > 54, "LowerKick")
		TNT1 A 0 A_JumpIfInventory("KickHasHitAnObject", 1, "LowerKick")
		TNT1 A 0 A_Recoil (-5)
		SLDK F 3
		TNT1 A 0 A_FireCustomMissile("SuperKickAttack", 0, 0, 0, -31)
		NULL A 0 A_JumpIf(Height > 54, "LowerKick")
		TNT1 A 0 A_JumpIfInventory("KickHasHitAnObject", 1, "LowerKick")
		TNT1 A 0 A_Recoil (-4)
		SLDK G 3
		TNT1 A 0 A_FireCustomMissile("SuperKickAttack", 0, 0, 0, -31)
		NULL A 0 A_JumpIf(Height > 54, "LowerKick")
		TNT1 A 0 A_JumpIfInventory("KickHasHitAnObject", 1, "LowerKick")
		TNT1 A 0 A_Recoil (-4)
		SLDK F 3
		TNT1 A 0 A_FireCustomMissile("SuperKickAttack", 0, 0, 0, -31)
		NULL A 0 A_JumpIf(Height > 54, "LowerKick")
		TNT1 A 0 A_JumpIfInventory("KickHasHitAnObject", 1, "LowerKick")
		TNT1 A 0 A_Recoil (-3)
		SLDK F 3
		TNT1 A 0 A_FireCustomMissile("SuperKickAttack", 0, 0, 0, -31)
		NULL A 0 A_JumpIf(Height > 54, "LowerKick")
		TNT1 A 0 A_JumpIfInventory("KickHasHitAnObject", 1, "LowerKick")
		TNT1 A 0 A_Recoil (-2)
		KICK A 0 A_Takeinventory("Kicking",1)
		KICK A 0 A_Takeinventory("IsSlideKicking",1)
		TNT1 A 0 A_ZoomFactor(1.0)
		SLDK HK 2
		TNT1 A 0 ACS_Execute(5923, 0, 0, 0, 0)
		TNT1 A 0 A_JumpIfInventory("GoFatality", 1, "Steady")
		Goto Readytofire
		
    BerserkerKick:
		TNT1 A 0 A_PlaySound("KICK", 1)
		TNT1 A 0 SetPlayerProperty(0,1,0)
		TNT1 A 0 A_GunFlash("FlashKicking")
		TNT1 A 0 A_SetAngle(-0.5 + angle)
		TNT1 A 1 A_SetPitch(+0.5 + pitch)
		TNT1 A 0 A_SetAngle(-0.5 + angle)
		TNT1 A 1 A_SetPitch(+0.5 + pitch)
		KICK B 1 A_SetPitch(+0.5 + pitch)
		TNT1 A 0 A_ZoomFactor(0.985)
		TNT1 A 0 A_SetAngle(-0.5 + angle)
		KICK C 1 A_SetAngle(-0.5 + angle)
		TNT1 A 0 A_ZoomFactor(0.970)
		TNT1 A 0 A_SetAngle(+0.5 + angle)
		KICK D 1 A_SetPitch(+1.25 + pitch)
		TNT1 A 0 A_ZoomFactor(0.955)
		TNT1 A 0 A_FireCustomMissile("SuperKickAttack", 0, 0, 0, -7)
		
        KICK H 3 A_ZoomFactor(0.950)
		TNT1 A 0 A_SetAngle(+1 + angle)
		TNT1 A 0 A_Recoil(-1)
		KICK A 0 A_TakeInventory("Kicking",1)
		KICK I 1 
		TNT1 A 0 A_ZoomFactor(0.955)
		TNT1 A 0 A_SetAngle(+1 + angle)
		KICK G 1 A_SetPitch(-0.5 + pitch)
		TNT1 A 0 A_ZoomFactor(0.970)
		KICK F 1 A_SetPitch(-0.5 + pitch)
		TNT1 A 0 A_ZoomFactor(0.985)
		TNT1 A 0 A_SetAngle(+0.5 + angle)
		KICK E 1 A_SetPitch(-0.5 + pitch)
		TNT1 A 0 A_ZoomFactor(0.995)
		TNT1 A 0 A_SetAngle(+0.5 + angle)
		KICK D 1 A_SetAngle(+0.5 + angle)
		TNT1 A 0 A_ZoomFactor(0.998)
		TNT1 A 0 A_SetPitch(-0.5 + pitch)
		KICK C 1 A_SetAngle(-0.5 + angle)
		TNT1 A 0 A_ZoomFactor(0.999)
		KICK B 1 A_SetPitch(-1.25 + pitch)
		TNT1 A 0 A_ZoomFactor(1.0)
		KICK A 1 
		TNT1 A 0 SetPlayerProperty(0,0,0)
		TNT1 A 0 A_JumpIfInventory("GoFatality", 1, "Steady")
		Goto ReadyToFire

	AirKick:
	    TNT1 A 0 A_jumpifinventory("PowerStrength",1,"SuperAirKick")
		TNT1 A 0 A_PlaySound("KICK", 1)
		TNT1 A 0 A_Recoil (-6)
		TNT1 A 0 A_GunFlash("FlashAirKicking")
		TNT1 A 0 A_ZoomFactor(0.95)
		KICK JKLMN 1
        RIFF A 0 A_FireCustomMissile("AirKickAttack", 0, 0, 0, -31)
		TNT1 A 0 A_ZoomFactor(0.975)
        KICK O 3
		TNT1 A 0 A_ZoomFactor(0.995)
		KICK A 0 A_TakeInventory("Kicking",1)
		KICK PQRST 2
		TNT1 A 0 A_ZoomFactor(1.0)
		TNT1 A 0 A_JumpIfInventory("GoFatality", 1, "Steady")
		Goto ReadyToFire

	SuperAirKick:
		TNT1 A 0 A_PlaySound("KICK", 1)
		TNT1 A 0 A_Recoil (-6)
		TNT1 A 0 A_GunFlash("FlashKicking")
		TNT1 A 0 A_ZoomFactor(0.95)
		KICK JKLMN 1
        RIFF A 0 A_FireCustomMissile("SuperAirKickAttack", 0, 0, 0, -31)
        TNT1 A 0 A_ZoomFactor(0.975)
        KICK O 3
		TNT1 A 0 A_ZoomFactor(0.995)
		KICK A 0 A_TakeInventory("Kicking",1)
		KICK PQRST 2
		TNT1 A 0 A_ZoomFactor(1.0)
		TNT1 A 0 A_JumpIfInventory("GoFatality", 1, "Steady")
		Goto ReadyToFire
		
	Steady:
	TNT1 A 1
	Goto ReadyToFire	
	
	Taunt:
		TNT1 A 0 A_TakeInventory("Zoomed", 1)
        TNT1 A 0 A_ZoomFactor(1.0)
        TNT1 A 5
		FUCK F 2
		TNT1 A 0 BRIGHT A_FireCustomMissile("Taunter", 0, 0, -1, 0)
		TNT1 A 0 BRIGHT A_FireCustomMissile("Taunter", -9, 0, -1, 0)
		TNT1 A 0 BRIGHT A_FireCustomMissile("Taunter", 9, 0, -1, 0)
        FUCK G 2 A_PlaySound("FUCK", 1)
        FUCK HI 2 A_AlertMonsters
		FUCK J 15 A_TakeInventory("Taunting",1)
        FUCK IHGF 5
		TNT1 A 5
		Goto ReadyToFire
	Salute:
	    TNT1 A 0 SetPlayerProperty(0,1,0)
		TNT1 A 0 A_ALertMonsters
		SALU ABCDEDCDEDCDEDCBA 4
		TNT1 A 0 A_TakeInventory("Salute1",1)
		TNT1 A 0 A_TakeInventory("Salute2",1)
		TNT1 A 0 SetPlayerProperty(0,0,0)
		Goto Ready
		
	
	}
}

ACTOR DoubleASGAmmo : Ammo //Your weapon's magazine ammo.
{
   Inventory.Amount 0
   Inventory.MaxAmount 24 //Your weapon's magazine ammo limit. Always leave one more bullet, so you can do the 12+1 effect.
   Ammo.BackpackAmount 0
   Ammo.BackpackMaxAmount 24
   Inventory.Icon SMGPA0
}


ACTOR LeftASGAmmo : Ammo //Your weapon's magazine ammo.
{
   Inventory.Amount 0
   Inventory.MaxAmount 12 //Your weapon's magazine ammo limit. Always leave one more bullet, so you can do the 12+1 effect.
   Ammo.BackpackAmount 0
   Ammo.BackpackMaxAmount 12
   Inventory.Icon SMGPA0
}


ACTOR RightASGAmmo : Ammo //Your weapon's magazine ammo.
{
   Inventory.Amount 0
   Inventory.MaxAmount 12 //Your weapon's magazine ammo limit. Always leave one more bullet, so you can do the 12+1 effect.
   Ammo.BackpackAmount 0
   Ammo.BackpackMaxAmount 12
   Inventory.Icon SMGPA0
}